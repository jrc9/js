JAVASCRIPT
--------------------------------------------------------------------------------------------------------------------

Es un lenguaje de programacion interpretado y orientado a objetos.
Es case sensitive, basado en prototipos/instancias/classless.
Tipado debil.
Lenguaje dinamico.

--------------------------------------------------------------------------------------------------------------------
¿Para que se usa?

-Dinamismo de los sitios web del lado del cliente
-Servidor en NodeJS
-Tecnologias Frontend como Angular, React o Vue.JS 

--------------------------------------------------------------------------------------------------------------------
FORMAS DE ENLAZAR JS 

-En Linea: <h1 onclick="alert('hola')">TITULO</h1>  ----> lo enlazas en la etiqueta (NO RECOMENDADO)
-Como contenido de la etiqueta <script>
-Enlazarla en un archivo externo:  <script src="codigo.js"></script>  -----> es la forma mas recomendada 
-Con un require

--------------------------------------------------------------------------------------------------------------------
VARIABLES

Las variables no es necesario declararlas por que pueden tomar cualquier tipo de dato.

z = 10

-Tipos de Datos: String, number, boolean.  -----> booleano el valor es 0 y 1 o true y false
-Casos especiales de datos: Undefined, null, Nan ---> hablan de que la variable no esta definida o hay un error
-Scope: es el contexto en el que trabajan las variables 
-hoisting: es el orden del codigo y como puede verse afectado el sitio por la creacion y la ejecucion

Inicializar variable: var es mas para una variable global y let es mas para una variable que es parte de un bloque.

var numero = 15;
let numero = 15;

Const es para declarar constantes, una vez que lo declaremos no lo podemos cambiar. Const se tiene que inicializar cuando se declara.

const numero=3.1416
-------------------------------
MULTIPLES VARIABLES 

let numero, numero2, numero3;  ----------> Solo hay que separar por comas 


-------------------------------
PROMPT 

Es una funcion de js que te manda una ventana con un parametro y una caja para escribir. lo que el usuario escriba en la funcion lo puedes guardar en una variable.

let nombre = prompt("Dame tu nombre");
alert(nombre);

--------------------------------------------------------------------------------------------------------------------
OPERADORES 

-Asignacion 
----> x = y
----> x += y  es igual a x = x + y
----> x -= y
----> x /= y 
-Aritmeticos
----> +, -, *, /, **,++, %, --

numero1 = 10;
resultado = -numero1;

Con lo de arriba puedes convertir un numero positivo a negativo

--------------------------------------------------------------------------------------------------------------------
CONCATENACION

saludo= "hola" 
pregunta = "¿como estas?"

concatenada= saludo + pregunta;  o   concatenada = saludo.concat(pregunta);

si se detecta algun texto en la suma, aunque haya numeros, todo lo convierte en texto.

---------------
CONCATENAR VARIABLES

nombre = "jorge"

frase = "soy" + nombre + "y estoy estudiando"  O  frase = `soy ${nombre} y estoy caminando` ----> en el segundo hay que usar `

--------------------------------------------------------------------------------------------------------------------
OPERADORES
-Operadores Logicos ------> &&, ||, !
-Operadores de comparacion ----> a == b, a != b, a===b, a>b, a>=b, 
--------------------------------------------------------------------------------------------------------------------
CAMEL CASE 

Es una forma de nombrar las variables, se empieza con minusculas y llas siguientes palabras van con mayuscula
-variableCadena
-variableNumero

--------------------------------------------------------------------------------------------------------------------
CONDICIONALES 

-If
-Else If 
-Else 

if (true){
    alert(hola);
}

else if (true){
    alert(hola);
}

else{
    alert(hola)
}

--------------------------------------------------------------------------------------------------------------------
ARRAYS 

let frutas = ["pera","manzana","mango"];
--------------------------------------------------------------------------------------------------------------------
ARRAYS ASOCIATIVOS 

let pc = {
    nombre: "mac"
    procesador: "i5"
    RAM: "8gb"
}

se manda llamar como pc[nombre] en vez de pc[0]

--------------------------------------------------------------------------------------------------------------------
CICLOS 

-While
-do while 
-for 
-for in 
-for of 

while(true){

}
---------------
do{

}while(true);
---------------

for(let i=0; i<6; i++){

}

--------------

for(animal in animales){ -------> El un devuelve el indice o la posicion en la que estan los elementos

}

for(animal of animales){ --------> muestra los elementos de animales 

}

--------------
Puede poner una etiqueta hasta arriba del for para etiquelarlo y poder llamar un break o un continue que te mande a esa etiqueta

forTermina:
for(){
    break forTermina;
}

--------------------------------------------------------------------------------------------------------------------
FUNCIONES 

function nombreFuncion (){

}

se manda a llamar como nombreFuncion();
----------------------------------------------------------------------------------------------------------------


POO
----------------------------------------------------------------------------------------------------------------

class animal {
		constructor(especie, edad,color){
			this.especie = especie;
			this.edad = edad;
			this.color = color;
		}
}

---------------------------------------------------------------------------------------------------------------
Abstraccion:simplificar lo mas posible un objeto;
Modularidad: separar un problema grande en partes 
Encapsulamiento: encapsular los datos para que no sean sencillos de acceder
Polimorfismo: capacidad de un objeto de comportarse diferente 
---------------------------------------------------------------------------------------------------------------
HERENCIA

Se usa extends para heredar de una clase y se pone super() en el constructor.
---------------------------------------------------------------------------------------------------------------
GETTER Y SETTERS

Sirven para poner una propiedad de un objeto en el caso de set y get para obtenerlo. Se escriben asi:

perro.setraza="doberman";
perro.getraza;
---------------------------------------------------------------------------------------------------------------
CAPITULO 4
---------------------------------------------------------------------------------------------------------------
METODOS DE CADENAS

concat() - junta dos o mas cadenas y retorna una nueva
startswith() - si una cadena comienza con los caracteres de otra cadena, devuelve true o false
endswith() - si una cadena termina con otra cadena, devuelve true o false
includes() - si una cadena puede encontrar otra cadena
indexOf() - devuelve el indice del primer caracter de la cadena
lastIndexOf() - lo opuesto a indexOf 

padStart() - rellenar cadena al principio con los caracteres deseados
padEnd() - Rellenar cadena al final con los caracteres deseados
repeat() - devuelve la misma cadena pero repetida las n vces que le digamos
split() - divide la cadena como le pidamos, guarda las cadenas en un array
substring() - retorna un pedazo de la cadena que le pasemos
toLowerCase() - convierte a minusculas
toUpperCase() - convierte a mayusculas
toString() - te dice si algo es string 
trim() -  elimina espacios en blanco al princio y al final 
trimEnd() - elimina espacios en blanco al final 
trimStart() - elimina espacios en blanco al principio
valueOf() - retorna el valor primitivo de un objeto string 
lenght() - numero de caracteres que contiene la cadena 

---------------------------------------------------------------------------------------------------------------
METODOS DE ARRAYS 

------
Transformadores

pop() - elimina el ultimo elemento del array y te dice cual 
shift() - eliminar el primer elemento de un array y te dice cual 
push() - agrega elemento al array al final 
reverse() - invierte el orden de los elemento del array 
unshift() - agrega uno o mas elementos al inicio del array y te dice la nueva longitud 
sort() - ordena los elementos y lo devuelve ordenado 
splice() - cambia  contenido de un array eliminando elementos existente y/o agregando nuevos
-----------
Accesores

join() - convierte a cadena todo el array, puedes agregar cosas enmedio de cada elemento 
slice() - devuelve parte de un array dentro de otro array 
toString(),indexOf(),includes() - igual que en cadenas 
-----------
De repeticion 

filter() - crea un nuevo array con todos los elementos que cumplan una condicion 
forEach() - ejecuta una funcion indicada una vez por cada elemento del array
---------------------------------------------------------------------------------------------------------------
Objeto Math
--------
numero=Math.sqrt(4);

sqrt() - raiz cuadrada
cbrt() - raiz cubica de un numero 
max() - devuelve eñ mayor de 0 o mas numeros 
min() - devuelve el minimo de 0 o mas numeros
random() - devuelve un numero pseudo aleatorio en 0 y 1
round() - redonde un numero al mas cercano
fround() - devuelve la representacion flotante de presicion simple 
floor() - redondea para abajo siempre 
trunc() - devuelve la parte entera del numero x
---------------------------------------------------------------------------------------------------------------
CAPITULO 5
---------------------------------------------------------------------------------------------------------------
metodos de consola

assert() - aparece error de msj en la consola si la afirmacion es falsa
clear() - limpia la consola
error() muestra msj de error en la consola 
info() - emite msj informativo a la consola web 
log() - muestra msj en la consola
table() - toma un argumento obligatorio: data, que debe ser un array o un objeto y un parametro adicional: colums y nos muestra una tabla en consola 
warn() - imprime un msj de advertencia en la consola 
------------
funciones de contexto

count() - nos dice cuantas veces ejecute la funcion 
countReset() - resetea el contador de count() 
group() - crea un grupo en linea en el registro
groupEnd() - Remueve un grupo en linea en el registro
groupCollapsed - crea un grupo de linea pero contraido 
-------------
funciones de temporizacion

time() - crea un contador en la consola 
timeEnd() - termina el contador 
timeLog() - muestra cuanto tiempo ha pasado desde que se inicio el contador 
---------------------------------------------------------------------------------------------------------------
CAPITULO 6 DOM(Document Object MOdel) 
---------------------------------------------------------------------------------------------------------------
nodo: un nodo en el DOM es cualquier etiqueta del cuerpo, como un parrafor, el body o las etiquetas de una lista 

Tipos de nodo:
-Document: nodo raiz a partir dle cual derivan los demas nodos 
-Element: nodos definidos por etiquetas HTML
-Text: el texto dentro de un nodo element se considera nodo hijo de tipo text 
-Atrtibute: los atributos de las etiquetas definen nodos 
-Comentarios y otros: los comentarios o declaraciones como doctype en la cabecera de los documentos HTML generan nodos 
--------------------
Metodos de seleccion de elementos 

getElementById() - selecciona un elemento por el iD de la etiqueta HTML ---> parrafo = document.getElementById("parrafo")
getElementByTagName - selecciona todos los elementos que coincidan con el nombre de la etiqueta especificada ---> parrafo=getElementByTagName("p")
querySelector() - devuelve el primer elemento que coincida con el grupo especificado de selectores ---> parrafo = document.querySelector(.parrafo)--> . si es class y # si es clase 
querySelectorAll() - Devuelve todos los elementos que coincidan con el grupo especificado de selectores
-------------------
Metodos para definir, obtener y eliminar valores de atributos
setAtribute() - modifica el valor de un atributo 
getAtribute() - obtiene el valor de un atributo
removeAtribute() - Borra el valor de un atributo 

















